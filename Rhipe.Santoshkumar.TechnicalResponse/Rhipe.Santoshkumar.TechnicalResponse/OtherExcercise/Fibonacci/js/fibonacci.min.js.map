{"version":3,"sources":["fibonacci.js"],"names":["onFibonaciSubmit","e","seriesLimitControl","document","getElementById","Fibonacci","GenerateFibonacciSeries","parseInt","value","SetUpErrorMessage","seriesIteration","elementToShow","generatedSeries","i","push","renderData","join","toString","elementId","textToRender","element","innerHTML","message"],"mappings":"AAwBA,QAAAA,kBAAAC,GACA,GAAAC,GAAAC,SAAAC,eAAA,cACAF,GACAG,UAAAC,wBAAAC,SAAAL,EAAAM,OAAA,WAGAH,UAAAI,kBAAA,8DAAA,WA9BA,GAAAJ,YACA,SAAAA,GACAA,EAAAC,wBAAA,SAAAI,EAAAC,GACA,IAEA,IAAA,GADAC,IAAA,EAAA,GACAC,EAAA,EAAAA,EAAAH,EAAA,EAAAG,IACAD,EAAAE,KAAAF,EAAAC,GAAAD,EAAAC,EAAA,GAEAE,GAAAJ,EAAAC,EAAAI,KAAA,MAEA,MAAAf,GACAI,EAAAI,kBAAA,sDAAAR,EAAAgB,WAAA,YAGA,IAAAF,GAAA,SAAAG,EAAAC,GACA,GAAAC,GAAAjB,SAAAC,eAAAc,EACAE,KACAA,EAAAC,UAAA,0BAAAF,EAAA,UAGAd,GAAAI,kBAAA,SAAAa,EAAAX,GACAI,EAAAJ,EAAAW,KAEAjB,YAAAA","file":"fibonacci.min.js","sourcesContent":["var Fibonacci;\n(function (Fibonacci) {\n    Fibonacci.GenerateFibonacciSeries = function (seriesIteration, elementToShow) {\n        try {\n            var generatedSeries = [0, 1];\n            for (var i = 0; i < seriesIteration - 2; i++) {\n                generatedSeries.push(generatedSeries[i] + generatedSeries[i + 1]);\n            }\n            renderData(elementToShow, generatedSeries.join(','));\n        }\n        catch (e) {\n            Fibonacci.SetUpErrorMessage('Error Calculating and displaying Fibonacci Series. ' + e.toString(), 'fSeries');\n        }\n    };\n    var renderData = function (elementId, textToRender) {\n        var element = document.getElementById(elementId);\n        if (element) {\n            element.innerHTML = '<div class=\"fiboWidth\">' + textToRender + '</div>';\n        }\n    };\n    Fibonacci.SetUpErrorMessage = function (message, elementToShow) {\n        renderData(elementToShow, message);\n    };\n})(Fibonacci || (Fibonacci = {}));\nfunction onFibonaciSubmit(e) {\n    var seriesLimitControl = document.getElementById('seriesLimit');\n    if (seriesLimitControl) {\n        Fibonacci.GenerateFibonacciSeries(parseInt(seriesLimitControl.value), 'fSeries');\n    }\n    else {\n        Fibonacci.SetUpErrorMessage('Cannot find teh input control to read the series limit from', 'fSeries');\n    }\n}\n"]}